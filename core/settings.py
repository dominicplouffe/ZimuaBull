"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from corsheaders.defaults import default_headers
from celery.schedules import crontab


def get_env_variable(var_name, default_value=None):
    """Get environment variable or return default value"""
    return os.environ.get(var_name, default_value)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
IS_PROD = os.environ.get("ENV", "local").lower() == "prod"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-9^t+tmaty!jecw-r342ac+*&6x3@m%13dr_71^6v!rjoz%m@p5"

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG to True because of the static files
DEBUG = True  # os.environ.get("DEBUG", "false").lower() == "true"


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "django_filters",
    "django_celery_beat",
    "corsheaders",
    "drf_spectacular",
    "zimuabull.apps.ZimuabullConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        'rest_framework.authentication.TokenAuthentication',
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "ZimuaBull API",
    "DESCRIPTION": "Stock market analysis and prediction API. Track symbols across multiple exchanges (TSE, NASDAQ, NYSE) with technical indicators, daily OHLCV data, and AI-powered predictions for near-future price movements.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "SCHEMA_PATH_PREFIX": "/api/",
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3001",  # React development server
    "http://127.0.0.1:3001",  # Alternate localhost format
    "https://zimua.dplouffe.ca",  # Production URL
]


ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "": {  # This configures the root logger
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

WSGI_APPLICATION = "core.wsgi.application"

# Django CORS and CSRF
# https://github.com/OttoYiu/django-cors-headers
CORS_ORIGIN_ALLOW_ALL = True

ALLOWED_HOSTS = ["*"]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    "WWW-AUTHORIZATION",
    "HTTP_WWW_AUTHORIZATION",
    "X-Fancontent-User",
    "Authorization",
]

CORS_EXPOSE_HEADERS = ["Content-Disposition"]

env_trusted_origin = os.environ.get("TRUSTED_ORIGIN")
CSRF_TRUSTED_ORIGINS = [] if not env_trusted_origin else [env_trusted_origin]


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Check if we're running in local development environment
IS_LOCAL_DEV = os.environ.get("ENV", "local").lower() == "local"

print(IS_LOCAL_DEV, os.environ.get("ENV", "local"))

if IS_LOCAL_DEV:
    # Use SQLite for local development
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    # Use PostgreSQL for production/staging environments
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": get_env_variable("BULL_DB_NAME", ""),
            "USER": get_env_variable("BULL_USERNAME", ""),
            "PASSWORD": get_env_variable("BULL_PASSWORD", ""),
            "HOST": get_env_variable("BULL_HOSTNAME", ""),
            "PORT": get_env_variable("BULL_PORT", "5432"),
            "TEST": {
                "NAME": "auto_tests",
            },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATIC_URL = "/static/"


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery Settings
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://localhost:6379")
CELERY_RESULT_BACKEND = os.environ.get(
    "CELERY_RESULT_BACKEND", "redis://localhost:6379"
)
CELERY_TASK_DEFAULT_QUEUE = "pidashtasks"
CELERY_TASK_QUEUE_MAX_PRIORITY = 10
CELERY_TASK_DEFAULT_PRIORITY = 5
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_IGNORE_RESULT = True
CELERY_TASK_ALWAYS_EAGER = (
    os.environ.get("CELERY_TASK_ALWAYS_EAGER", "false").lower() == "true"
)
CELERY_BEAT_SCHEDULE = {
    "zimuabull.tasks.scan.scan": {
        "task": "zimuabull.tasks.scan.scan",
        "schedule": crontab(hour=3, minute=5),
        "options": {"queue": "pidashtasks"},
    },
}
