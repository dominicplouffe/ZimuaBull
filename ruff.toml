# Ruff configuration for Django project
# See: https://docs.astral.sh/ruff/configuration/

# Target Python 3.13
target-version = "py313"

# Maximum line length (Django standard is 119)
line-length = 119

# Enable automatic fixes
fix = true

[lint]
# Enable specific rule sets
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort (import sorting)
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ASYNC", # flake8-async
    "S",     # flake8-bandit (security)
    "BLE",   # flake8-blind-except
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "DJ",    # flake8-django
    "DTZ",   # flake8-datetimez
    "EM",    # flake8-errmsg
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "INT",   # flake8-gettext
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "PL",    # pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "NPY",   # numpy
    "PERF",  # perflint
    "RUF",   # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",    # Line too long (handled by formatter)
    "S101",    # Use of assert (common in Django tests)
    "S311",    # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "DJ001",   # Avoid using null=True on string-based fields (sometimes necessary)
    "TRY003",  # Avoid specifying long messages outside the exception class
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "N818",    # Exception name should be named with an Error suffix (Django uses ValidationError)
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Exclude specific directories
[lint.per-file-ignores]
"*/migrations/*" = [
    "E501",    # Line too long
    "N806",    # Variable in function should be lowercase
    "DJ008",   # Model does not define __str__ method
]
"*/tests/*" = [
    "S101",    # Use of assert
    "S106",    # Possible hardcoded password
    "ARG001",  # Unused function argument
    "PLR2004", # Magic value in comparison
]
"*/management/commands/*" = [
    "T201",    # print() found
]
"settings.py" = [
    "E501",    # Line too long
    "S105",    # Possible hardcoded password
    "S106",    # Possible hardcoded password
    "DJ008",   # Model does not define __str__ method
]

[format]
# Use double quotes for strings
quote-style = "double"

# Indent with 4 spaces
indent-style = "space"

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Format docstrings
docstring-code-format = true
docstring-code-line-length = 88

[lint.isort]
# Django-specific import ordering
known-first-party = ["zimuabull", "core"]
section-order = [
    "future",
    "standard-library",
    "django",
    "third-party",
    "first-party",
    "local-folder"
]

[lint.isort.sections]
"django" = ["django"]

[lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[lint.pydocstyle]
convention = "google"
